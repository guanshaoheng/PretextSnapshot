#!/usr/bin/env python

from subprocess import Popen, PIPE
import argparse, os, os.path, shutil

parser = argparse.ArgumentParser()

parser.add_argument("-c", "--compiler", type=str,
                    help="compiler to use (one will be chosen if not specified)")
parser.add_argument("-f", "--flags", type=str,
                    help="compiler flags (override defaults)")
parser.add_argument("-d", "--libdeflate", type=str,
                    help="path to libdeflate static library (will be downloaded and built if not specified)")
parser.add_argument("-m", "--libmpc", type=str,
                    help="path to libmpc static library (will be downloaded and built if not specified)")

#exts = {"avx2": "-mavx2", "avx": "-mavx", "sse42": "-msse4.2", "sse41": "-msse4.1", "noext": ""};
exts = {"avx2": "-mavx2", "avx": "-mavx", "sse42": "-msse4.2", "sse41": "-msse4.1"};
parser.add_argument("--ext", type=str,
                    help="CPU extensions",
                    nargs="+",
                    choices=["all"] + [k for k in exts.keys()])

args = parser.parse_args()


compilers = ['clang', 'gcc']
flags = {"clang": "-Ofast -pthreads", "gcc": "-O3 -pthread"}
def getFlags(compiler):
    for c in flags.keys():
        if c in compiler.split("/")[-1]:
            return flags[c]
    raise SystemExit("Unknown compiler " + compiler)

if args.compiler is None:
    
    for compiler in compilers:
        
        p = Popen(['which', compiler], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
        
        if p.returncode == 0:
            args.compiler = compiler
            print("Using " + compiler)
            break
else:
    p = Popen(['which', args.compiler], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Could not find '" + args.compiler + "' on your PATH")


if args.compiler is None:
    raise SystemExit("Could not find an installed compiler on your PATH")

if args.flags is None:
    args.flags = getFlags(args.compiler)
    args.flags += " -std=c++11 -march=x86-64 -mtune=generic"

if args.ext is None:
    buildExts = [k for k in exts.keys()]
else:
    buildExts = args.ext

if args.libdeflate is None:
    args.libdeflate = []
    print("Downloading and building libdeflate")
    
    p = Popen(['which', 'git'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Could not find 'git' on your PATH, cannot install libdeflate")

    p = Popen(['git', 'clone', 'https://github.com/ebiggers/libdeflate'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Error cloning libdeflate: " + err.decode('utf-8'))

    if not os.path.exists("libdeflate"):
        raise SystemExit("Error, libdeflate directory does not exist")

    os.chdir("libdeflate")

    env = os.environ.copy()
    env['CC'] = args.compiler
    env['DISABLE_GZIP'] = '1'
    
    for ext in buildExts:
        flags = args.flags + " {}".format(exts[ext])

        env['CFLAGS'] = args.flags
        p = Popen(['make', 'libdeflate.a'], stdin=PIPE, stdout=PIPE, stderr=PIPE, env=env)
        output, err = p.communicate()
        if p.returncode != 0:
            raise SystemExit("Error making libdeflate.a: " + err.decode('utf-8'))

        if not os.path.exists("libdeflate.a"):
            raise SystemExit("Error, could not find libdeflate.a")

        os.rename("libdeflate.a", "../libdeflate.a.{}".format(ext))
        args.libdeflate.append("libdeflate.a.{}".format(ext))
    
    os.chdir("..")
    try:
        shutil.rmtree("libdeflate")
    except OSError as e:
        raise SystemExit("Error: %s - %s.".format(e.filename, e.strerror))


if args.libmpc is None:
    args.libmpc = []
    print("Downloading and building libmpc")
    
    p = Popen(['which', 'git'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Could not find 'git' on your PATH, cannot install libmpc")

    p = Popen(['git', 'clone', 'https://github.com/orangeduck/mpc'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Error cloning mpc: " + err.decode('utf-8'))

    if not os.path.exists("mpc"):
        raise SystemExit("Error, mpc directory does not exist")

    os.chdir("mpc")

    for ext in buildExts:
        flags = args.flags.replace("-std=c++11", "")
        flags += " {}".format(exts[ext])
        
        command = args.compiler + " -c mpc.c " + args.flags.replace("-std=c++11", "") + " -o mpc.o"
        p = Popen(command.strip().split(), stdin=PIPE, stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
        if p.returncode != 0:
            raise SystemExit("Error making mpc.o: " + err.decode('utf-8'))
        
        command = "ar rcs libmpc.a mpc.o"
        p = Popen(command.strip().split(), stdin=PIPE, stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
        if p.returncode != 0:
            raise SystemExit("Error making libmpc.a: " + err.decode('utf-8'))
     
        if not os.path.exists("libmpc.a"):
            raise SystemExit("Error, could not find libmpc.a")

        os.rename("libmpc.a", "../libmpc.a.{}".format(ext))
        args.libmpc.append("libmpc.a.{}".format(ext))
    
    os.chdir("..")
    try:
        shutil.rmtree("mpc")
    except OSError as e:
        raise SystemExit("Error: %s - %s.".format(e.filename, e.strerror))


print("Building PretextSnapshot")

if "LD" in os.environ:
    os.symlink(os.environ["LD"], "ld")
    args.compiler += " -B ./"
    link_ld = True
    print("Using linker " + os.environ["LD"])
else:
    link_ld = False

nExts = len(buildExts)

for i in range(nExts):
    libdeflate = args.libdeflate[i] if type(args.libdeflate) is list else args.libdeflate
    libmpc = args.libmpc[i] if type(args.libmpc) is list else args.libmpc
    outputBinary = "PretextSnapshot.{}".format(buildExts[i])
    flags = args.flags + " {}".format(exts[buildExts[i]])

    command = args.compiler + " PretextSnapshot.cpp " + libdeflate + " " + libmpc + " -Iinclude -lstdc++ -lm " + flags + " -o " + outputBinary
    p = Popen(command.strip().split(), stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Error making {}: ".format(outputBinary) + err.decode('utf-8'))
    
    if nExts > 1:
        print("Built {}".format(outputBinary))

    if type(args.libmpc) is list:
        os.remove(libmpc)
    if type(args.libdeflate) is list:
        os.remove(libdeflate)

if nExts == 1:
    os.rename("PretextSnapshot.{}".format(buildExts[0]), "PretextSnapshot")
else:
    print("Downloading and building wrapper")

    p = Popen(['which', 'git'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Could not find 'git' on your PATH, cannot build wrapper")

    p = Popen(['git', 'clone', 'https://github.com/wtsi-hpag/SIMDExtensionWrapper'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Error cloning mpc: " + err.decode('utf-8'))

    if not os.path.exists("SIMDExtensionWrapper"):
        raise SystemExit("Error, SIMDExtensionWrapper directory does not exist")

    os.chdir("SIMDExtensionWrapper")

    flags = args.flags
    
    command = args.compiler + " SIMDExtensionWrapper.cpp " + flags + " -DProgramName=PretextSnapshot -o PretextSnapshot"
    p = Popen(command.strip().split(), stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    if p.returncode != 0:
        raise SystemExit("Error making Wrapper: " + err.decode('utf-8'))
    
    if not os.path.exists("PretextSnapshot"):
        raise SystemExit("Error, could not find Wrapper")

    os.rename("PretextSnapshot", "../PretextSnapshot")

    os.chdir("..")
    try:
        shutil.rmtree("SIMDExtensionWrapper")
    except OSError as e:
        raise SystemExit("Error: %s - %s.".format(e.filename, e.strerror))

if link_ld:
    os.remove("ld")

print("Done")






